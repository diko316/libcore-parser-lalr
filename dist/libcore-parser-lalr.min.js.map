{"version":3,"file":"libcore-parser-lalr.min.js","sources":["../src/state/map.js","../src/helper.js","../src/state/pointer.js","../src/state/item.js","../src/state/define.js","../src/state/builder.js","../src/lexeme.js","../src/iterator/base.js","../src/iterator.js","../src/parser.js","../src/all.js"],"sourcesContent":["'use strict';\n\n\nimport {\n            string,\n            object,\n            array,\n            contains\n            \n        } from \"libcore\";\n\nfunction StateMap() {\n    var start = \"$start\",\n        end = \"$end\",\n        tokenEnd = \"$\",\n        states = {};\n\n    this.stateGen =\n        this.symbolGen =\n        this.reduceGen = 0;\n\n    states[start] = {};\n    this.root = end;\n    this.lookup = {};\n    this.symbol = {};\n    this.start = start;\n    this.states = states;\n    this.anchors = {};\n    this.ends = {};\n    this.exclude = {};\n    this.finalized = false;\n    this.rawStates = [];\n\n    this.reduceLookup = {};\n    this.reducers = {};\n\n    this.augmentedRoot = this.generateSymbol(end);\n    this.endSymbol = this.generateSymbol(tokenEnd);\n    this.endToken = tokenEnd;\n\n    \n\n}\n\n\nStateMap.prototype = {\n    stateGen: 0,\n    rawStates: null,\n    \n    constructor: StateMap,\n    \n    generateState: function () {\n        var id = 's' + (++this.stateGen);\n        this.states[id] = {};\n        return id;\n    },\n\n    generateSymbol: function (name) {\n        var lookup = this.lookup,\n            symbols = this.symbol,\n            access = ':' + name;\n        var id;\n        \n        if (access in lookup) {\n            return lookup[access];\n        }\n    \n        // create symbol\n        id = 's>' + (++this.symbolGen);\n    \n        lookup[access] = id;\n        symbols[id] = name;\n    \n        return id;\n    \n    },\n\n    generateReduceId: function (name, params, ruleIndex) {\n        var lookup = this.reduceLookup,\n            all = this.reducers,\n            access = name + ':' + params + ':' + ruleIndex;\n        var id;\n\n        if (access in lookup) {\n            return lookup[access];\n        }\n\n        id = 'r>' + (++this.reduceGen);\n\n        lookup[access] = id;\n        all[id] = [name, params, ruleIndex];\n\n        return id;\n    },\n\n    lookupReducer: function (id) {\n        var all = this.reducers;\n        \n        if (id in all) {\n            return all[id];\n        }\n\n        return false;\n    },\n\n    lookupSymbol(name) {\n        var symbols = this.symbol;\n\n        if (name in symbols) {\n            return symbols[name];\n        }\n\n        return false;\n\n    },\n    \n    setAnchorState: function (state) {\n        var anchors = this.anchors;\n        \n        if (!(state in anchors)) {\n            this.anchors[state] = true;\n        }\n    },\n    \n    setReduceState: function (state, name, params, ruleIndex) {\n        var ends = this.ends,\n            id = this.generateReduceId(name, params, ruleIndex),\n            all = this.reducers;\n        var current;\n        \n        if (state in ends) {\n            current = all[ends[state]];\n            if (current[0] !== name || current[1] !== params) {\n                throw new Error(\"Reduce conflict found \" +\n                                current[0] + ' ! <- ' + name);\n            }\n        }\n        else {\n            ends[state] = id;\n        }\n        \n    },\n    \n    reset: function () {\n        this.constructor();\n    },\n\n    finalize: function() {\n        var list = this.rawStates;\n        var c, l;\n\n        if (!this.finalized && list) {\n            this.finalized = true;\n\n            for (c = -1, l = list.length; l--;) {\n                list[++c].finalize();\n            }\n\n            // remove raw states\n            list.length = 0;\n\n            // remove lookup\n            delete this.lookup;\n        }\n        \n        return this.finalized;\n    },\n    \n    setExcludes: function (exclude) {\n        var current = this.exclude;\n        var c, l;\n        \n        if (array(exclude)) {\n            for (c = -1, l = exclude.length; l--;) {\n                current[exclude[++c]] = true;\n            }\n        }\n    },\n    \n    importStates: function (definition) {\n        var isObject = object,\n            isString = string;\n        var start, states, anchors, ends, root, exclude, symbol, reducers,\n            list, c, l;\n        \n        if (!isObject(definition)) {\n            throw new Error(\"Invalid Object definition parameter.\");\n        }\n        \n        states = definition.states;\n        if (!isObject(states)) {\n            throw new Error(\n                        'Invalid \"states\" Object in definition parameter.');\n        }\n        \n        root = definition.root;\n        if (!isString(root)) {\n            throw new Error(\n                        'Invalid \"root\" grammar rule in definition parameter.');\n        }\n        \n        start = definition.start;\n        if (!isString(start) || !(start in states)) {\n            throw new Error(\n                        'Invalid \"start\" state in definition parameter.');\n        }\n        \n        anchors = definition.anchors;\n        if (!isObject(anchors)) {\n            throw new Error('Invalid \"anchors\" states in definition parameter.');\n        }\n        \n        ends = definition.ends;\n        if (!isObject(anchors)) {\n            throw new Error('Invalid \"ends\" states in definition parameter.');\n        }\n\n        reducers = definition.reducers;\n        if (!isObject(reducers)) {\n            throw new Error('Invalid production \"reducers\" in definition.');\n        }\n\n        symbol = definition.symbol;\n        if (!isObject(symbol)) {\n            throw new Error('Invalid \"symbol\" map in definition parameter.');\n        }\n\n        list = definition.exclude;\n        if (!array(list)) {\n            throw new Error('Invalid \"exclude\" token in definition parameter.');\n        }\n\n        exclude = {};\n        for (c = -1, l = list.length; l--;) {\n            exclude[list[++c]] = true;\n        }\n        \n        this.root = root;\n        this.start = start;\n        this.states = states;\n        this.anchors = anchors;\n        this.ends = ends;\n        this.reducers = reducers;\n        this.exclude = exclude;\n        this.symbol = symbol;\n        \n        return true;\n    },\n    \n    toObject: function () {\n        var has = contains,\n            exclude = this.exclude,\n            list = [],\n            len = 0;\n        var name;\n\n        // export exclude\n        for (name in exclude) {\n            if (has(exclude, name)) {\n                list[len++] = name;\n            }\n        }\n\n\n        return {\n                root: this.root,\n                start: this.start,\n                states: this.states,\n                anchors: this.anchors,\n                reducers: this.reducers,\n                ends: this.ends,\n                exclude: list,\n                symbol: this.symbol\n            };\n    },\n    \n    exportStates: function (json) {\n        var current = this.toObject();\n            \n        if (json === true) {\n            try {\n                return JSON.stringify(current);\n            }\n            catch (e) {\n                return null;\n            }\n        }\n        \n        return current;\n    }\n    \n    \n};\n\n\nexport default StateMap;","'use strict';\n\nfunction empty() {\n}\n\nexport\n    function clone(obj) {\n        var E = empty;\n        E.prototype = obj;\n        return new E();\n    }\n\n","'use strict';\n\n\nfunction Pointer(lexeme, state) {\n\n    this.item = lexeme;\n\n    // bind\n    this.to = state;\n\n}\n\nPointer.prototype = {\n    constructor: Pointer,\n    next: null,\n    item: null,\n    to: null\n\n};\n\n\nexport default Pointer;","'use strict';\n\nimport { clone } from \"../helper.js\";\n\nimport Pointer from \"./pointer.js\";\n\nfunction Item(id, map) {\n    var list = map.rawStates;\n    \n    this.map = map;\n    this.state = id = id || map.generateState();\n    this.base = this;\n    this.watched = [];\n    this.reduceList = [];\n    this.recursion = {};\n\n    this.references = [];\n\n    // create default\n    this.lexeme = map.augmentedRoot;\n\n    // register as raw state\n    list[list.length] = this;\n\n}\n\nItem.prototype = {\n    state: null,\n    constructor: Item,\n    nextInQueue: null,\n    parent: null,\n    map: null,\n    pointer: null,\n    watched: null,\n    contextPointer: null,\n    reduceList: null,\n    lexeme: null,\n    recursion: null,\n    finalized: false,\n\n    getRecursionItem: function (ruleId) {\n        var recursion = this.recursion;\n\n        return ruleId in recursion ? recursion[ruleId] : null;\n\n    },\n\n    insertNextQueue: function (item) {\n        var after = this.nextInQueue,\n            last = item;\n\n        this.nextInQueue = item;\n\n        // connect last item with my next item\n        for (; last.nextInQueue; last = last.nextInQueue) { }\n\n        last.nextInQueue = after;\n\n    },\n\n    appendQueue: function (item) {\n        var last = this;\n\n        for (; last.nextInQueue; last = last.nextInQueue) { }\n\n        last.nextInQueue = item;\n\n    },\n\n    createRecursion: function (ruleId, lexeme) {\n        var duplicate = clone,\n            item = duplicate(this),\n            recursion = duplicate(this.recursion);\n\n        item.parent = this;\n\n        item.lexeme = lexeme;\n        item.recursion = recursion;\n        recursion[ruleId] = item;\n\n        item.contextPointer =\n            item.nextInQueue = null;\n\n        return item;\n    },\n\n    getPointerItem(lexeme) {\n        var pointer = this.pointer;\n\n        // find from parent and up\n        for (; pointer; pointer = pointer.next) {\n            if (pointer.item === lexeme) {\n                return pointer.to;\n            }\n        }\n\n        return null;\n\n    },\n\n    point: function (lexeme) {\n\n        var Class = Pointer,\n            found = this.getPointerItem(lexeme);\n        var list, c, len, item, has;\n\n        // create if not found\n        if (!found) {\n\n            // create item\n            found = new Item(null, this.map);\n            found.lexeme = lexeme;\n\n            // share recursion\n            found.recursion = this.recursion;\n\n            // create pointer\n            this.onSetPointer(new Class(lexeme, found));\n\n            // populate dependencies\n            list = this.watched;\n\n            for (c = -1, len = list.length; len--;) {\n                item = list[++c];\n                has = item.getPointerItem(lexeme);\n                if (!has) {\n                    item.onSetPointer(new Class(lexeme, found));\n                }\n            }\n        }\n\n        return found;\n\n    },\n\n    watchItem: function (item) {\n        var list = this.watched,\n            Class = Pointer;\n        var pointer, lexeme, found;\n\n        if (item.state !== this.state && list.indexOf(item) === -1) {\n            \n            list[list.length] = item;\n\n            pointer = this.pointer;\n\n            // add current pointers\n            for (; pointer; pointer = pointer.next) {\n                lexeme = pointer.item;\n                found = item.getPointerItem(lexeme);\n\n                if (!found) {\n                    item.onSetPointer(new Class(lexeme, pointer.to));\n                }\n            }\n        }\n        \n    },\n\n    onSetPointer: function (pointer) {\n        var last = this.pointer,\n            context = this.contextPointer;\n        var parent;\n\n        // connect to last item\n        if (last) {\n            // connect last\n            for (; last.next; last = last.next) {}\n            last.next = pointer;\n\n        }\n        // new pointer\n        else {\n            // set base pointer\n            this.base.pointer = pointer;\n        }\n\n        // populate context pointer across parents\n        if (!context) {\n            // populate parent context pointers\n            parent = this;\n            for (; parent; parent = parent.parent) {\n                if (!parent.contextPointer) {\n                    parent.contextPointer = pointer;\n                }\n            }\n        }\n    },\n\n    finalize: function () {\n        var map = this.map,\n            id = this.state,\n            stateObject = map.states[id];\n\n        var list, c, len, item, lexeme;\n\n        // finalize main pointers\n        item = this.pointer;\n\n        for (; item; item = item.next) {\n            lexeme = item.item;\n\n            if (!(lexeme in stateObject)) {\n                stateObject[lexeme] = item.to.state;\n            }\n        }\n\n        // reduce\n        list = this.reduceList;\n        for (c = -1, len = list.length; len--;) {\n            item = list[++c];\n            map.setReduceState(id, item[0], item[1], item[2]);\n        }\n\n    },\n\n    reduce: function (production, params, group) {\n        var list = this.reduceList;\n\n        list[list.length] = [production, params, group];\n\n    }\n\n};\n\nexport default Item;","'use strict';\n\nimport Item from \"./item.js\";\n\nfunction define(grammar, map, exclude) {\n    var STATE_END = 0,\n        STATE_START = 1,\n        STATE_RULE_ITERATE = 2,\n        STATE_RULE_END = 5,\n\n        defineState = STATE_START,\n        ruleIndex = grammar.rules,\n        ruleGroup = grammar.ruleGroup;\n\n    var anchor, production, rule, lexeme, ruleId, params,\n        queue, recursion, pendingRecursion, item;\n\n\n    if (exclude) {\n        map.setExcludes(exclude);\n    }\n\n    queue = new Item(map.start, map);\n    \n    for (; defineState;) {\n\n        switch (defineState) {\n        case STATE_START:\n            if (!queue) {\n                defineState = STATE_END;\n                break;\n            }\n\n            anchor = queue;\n            production = queue.lexeme;\n            \n            rule = ruleIndex[production];\n\n            defineState = STATE_RULE_ITERATE;\n\n            pendingRecursion = null;\n\n        /* falls through */\n        case STATE_RULE_ITERATE:\n            // go to next pending\n            if (!rule) {\n                defineState = STATE_RULE_END;\n                break;\n            }\n\n            \n            \n            ruleId = rule[0];\n            lexeme = rule[1];\n\n            // go to next rule\n            rule = rule[2];\n\n            // start of rule\n            if (ruleId === false) {\n                params = 0;\n                queue = item = anchor;\n                break;\n            }\n\n            // connect states\n            params++;\n\n            // non-terminal\n            if (lexeme in ruleIndex) {\n\n                // find recursion\n                recursion = item.getRecursionItem(ruleId);\n                \n                // follow recursion\n                if (recursion) {\n\n                    // apply and watch updates\n                    recursion.watchItem(item);\n\n                    // end here\n                    for (; rule && rule[0] !== false; rule = rule[2]) { }\n                    break;\n\n                }\n\n                // create recursion\n                recursion = item.createRecursion(ruleId, lexeme);\n\n                // immediately insert if anchor\n                if (queue === anchor) {\n                    queue.insertNextQueue(recursion);\n\n                }\n                // add to pending\n                else if (pendingRecursion) {\n                    pendingRecursion.appendQueue(recursion);\n                }\n                // first pending recursion\n                else {\n                    pendingRecursion = recursion;\n                }\n                \n            }\n            \n            item = item.point(lexeme);\n\n            // reduce if no more next rules or end of lexer rule\n            if (!rule || rule[0] === false) {\n                item.reduce(production, params, ruleGroup[ruleId]);\n            }\n        \n        break;\n        case STATE_RULE_END:\n\n            // insert pending recursions\n            if (pendingRecursion) {\n                queue.appendQueue(pendingRecursion);\n            }\n\n            // try next pending\n            queue = queue.nextInQueue;\n            defineState = STATE_START;\n\n        break;\n        }\n\n    }\n    \n    // build state map\n    return true;\n    \n}\n\nexport default define;","'use strict';\n\nimport {\n            string,\n            regex,\n            array,\n            contains\n            \n        } from \"libcore\";\n        \nimport defineStates from \"./define.js\";\n        \nvar RULE_NAME_RE = /^([A-Z][a-zA-Z]+(\\_?[a-zA-Z0-9])*|\\$end|\\$)$/;\n\nfunction define(name, rule, grammar, tokenizer) {\n    var rules = grammar.rules,\n        ruleIndex = grammar.ruleIndex,\n        terminal = grammar.terminal,\n        lexIndex = grammar.lexIndex,\n        ruleNames = grammar.ruleNames,\n        ruleNameRe = RULE_NAME_RE,\n        map = grammar.map,\n        isString = string,\n        isRegex = regex;\n    var l, item, lexemes, token, tokenId, created,\n        prefix, suffix, from, to, current, lexemeId;\n\n    \n    \n    if (isString(rule) || isRegex(rule)) {\n        rule = [rule];\n    }\n    \n    if (!array(rule)) {\n        throw new Error(\"Invalid grammar rule found in \" + name);\n    }\n    \n    from = to = null;\n    lexemes = [];\n    \n    for (l = rule.length; l--;) {\n        item = rule[l];\n        \n        if (isRegex(item)) {\n            token = item.source;\n            tokenId = map.generateSymbol('/' + item.source + '/');\n            \n            // register token\n            if (!(tokenId in terminal)) {\n                tokenizer.define([ tokenId, item ]);\n                terminal[tokenId] = tokenId;\n            }\n            \n            item = tokenId;\n        }\n        else if (!isString(item)) {\n            throw new Error(\"Invalid token in grammar rule \" + item);\n        }\n        else if (!ruleNameRe.test(item)) {\n            throw new Error(\"Invalid grammar rule name format: \" + item);\n        }\n        else {\n            item = map.generateSymbol(item);\n        }\n        \n        lexemes[l] = item;\n        lexemeId = 'r' + (++grammar.rgenId);\n        lexIndex[lexemeId] = item;\n        created = [lexemeId, item, from];\n        \n        if (!from) {\n            to = created;\n        }\n        from = created;\n\n    }\n\n    // generate name symbol\n    //name = map.generateSymbol(name);\n\n    \n    suffix = ' -> ' + lexemes.join(',');\n    prefix = name + ':';\n    tokenId = name + suffix;\n    \n    if (tokenId in ruleIndex) {\n        throw new Error(\"Grammar rule is already defined \" + name + suffix);\n    }\n    else {\n        ruleIndex[tokenId] = true;\n    }\n    \n    if (!(name in rules)) {\n        rules[name] = null;\n        ruleNames[ruleNames.length] = name;\n    }\n    \n    // append\n    from = [false, null, from];\n    current = rules[name];\n    \n    if (current) {\n        to[2] = current;\n    }\n    \n    rules[name] = from;\n    \n    return [from[2][0], to[0]];\n}\n\n\nfunction build(root, stateMap, tokenizer, definitions, exclude) {\n    var isString = string,\n        isArray = array,\n        isRegex = regex,\n        defineRule = define,\n        ruleNameRe = RULE_NAME_RE,\n        ruleNames = [],\n        grammarRoot = \"$\" + root;\n    var c, l, dc, dl, name, definition,\n        rules, grammar, groups, group, index, terminal;\n\n    stateMap.reset();\n    \n    stateMap.root = stateMap.generateSymbol(grammarRoot);\n        \n    name = null;\n    rules = {};\n    grammar = {\n        root: grammarRoot,\n        rgenId: 0,\n        map: stateMap,\n        ruleNames: ruleNames = [],\n        rules: rules,\n        terminal: terminal = {},\n        lexIndex: index = {},\n        ruleIndex: {},\n        ruleGroup: groups = {}\n    };\n    \n    // augment root\n    definitions.splice(definitions.length,\n                       0,\n                       stateMap.lookupSymbol(stateMap.augmentedRoot),\n                        [[ root,\n                            stateMap.lookupSymbol(stateMap.endSymbol)]]);\n\n    for (c = -1, l = definitions.length; l--;) {\n        \n        definition = definitions[++c];\n        \n        if (isString(definition)) {\n            \n            if (!ruleNameRe.test(definition)) {\n                throw new Error(\"Invalid grammar rule name \" + definition);\n            }\n            name = stateMap.generateSymbol(definition);\n        \n        }\n        else if (isArray(definition)) {\n            \n            // do not accept grammar rule if it doesn't have name\n            if (!name) {\n                throw new Error(\"Invalid grammar rules parameter.\");\n            }\n            \n            dc = -1;\n            dl = definition.length;\n            \n            for (; dl--;) {\n                group = defineRule(name,\n                                   definition[++dc],\n                                   grammar,\n                                   tokenizer);\n                // register group\n                groups[group[1]] = name + ':' + (dc + 1);\n            }\n\n        }\n        else {\n            throw new Error(\"Invalid item in definitions parameter.\");\n        }\n        \n    }\n    \n    // add excludes\n    if (exclude) {\n        exclude = exclude.slice(0);\n        \n        for (l = exclude.length; l--;) {\n            definition = exclude[l];\n            \n            if (!isRegex(definition)) {\n                throw new Error(\"Invalid exclude token parameter.\");\n            }\n            \n            name = stateMap.generateSymbol('/' + definition.source + '/');\n            if (!(name in terminal)) {\n                tokenizer.define([ name, definition ]);\n                terminal[name] = name;\n                exclude[l] = name;\n            }\n            else {\n                exclude.splice(l, 1);\n            }\n            \n        }\n        \n    }\n\n    \n    if (!contains(rules, stateMap.generateSymbol(root))) {\n        throw new Error(\"Invalid root grammar rule parameter.\");\n    }\n    \n    return defineStates(grammar, stateMap, exclude) &&\n            stateMap.finalize();\n\n}\n\nexport default build;\n\n","'use strict';\n\nimport { contains } from \"libcore\";\n\nvar TYPE = {\n        terminal: 1,\n        nonterminal: 2,\n        compound: 3,\n        end: 4\n    };\n    \n    \n\nfunction Lexeme(type) {\n    this.useType(type);\n}\n\n\nLexeme.prototype = {\n    constructor: Lexeme,\n    name: null,\n    rule: null,\n    value: null,\n    reduceCount: 0,\n    from: 0,\n    to: 0,\n    \n    parent: null,\n    first: null,\n    last: null,\n    next: null,\n    previous: null,\n    \n    useType: function (type) {\n        var types = TYPE;\n        this.type = contains(types, type) ?\n                        types[type] : types.token;\n    }\n};\n\nexport {\n        TYPE as type,\n        Lexeme\n    };\n\nexport default Lexeme;","'use strict';\n\nimport {\n            string,\n            number,\n            object\n        } from \"libcore\";\n        \nimport Lexeme from \"../lexeme.js\";\n\nvar INVALID_STATE_HANDLER = \"Invalid result from state handler\";\n\nfunction BaseIterator(parser) {\n    if (!object(parser)) {\n        throw new Error(\"Invalid parser parameter.\");\n    }\n    \n    this.parser = parser;\n    this.reset();\n    \n    this.start = ':start';\n}\n\n\nBaseIterator.prototype = {\n    constructor: BaseIterator,\n    subject: '',\n    returns: false,\n    current: null,\n    ready: false,\n    completed: false,\n    error: null,\n    \n    actions: {\n        ':start': {\n            0: ':fail',\n            1: ':tokenize'\n            \n        },\n        \n        ':tokenize': {\n            0: ':fail',\n            1: ':tokenize',\n            2: ':shift',\n            3: ':reduce'\n        },\n        \n        ':shift': {\n            0: ':fail',\n            1: ':tokenize'\n        },\n        \n        ':reduce': {\n            0: ':fail',\n            1: ':shift',\n            2: ':reduce',\n            3: ':success'\n        },\n        ':fail': {},\n        ':success': {}\n    },\n    \n    ':start': function () {\n        var me = this;\n        \n        me.params = me.nextTokenIndex;\n        \n        return 1;\n    },\n    \n    ':tokenize': function (from) {\n        var me = this,\n            parser = me.parser,\n            map = parser.map,\n            ends = map.ends,\n            states = map.states,\n            state = me.pstate,\n            token = parser.tokenizer.tokenize(from,\n                                              me.subject),\n            endToken = map.endToken;\n            \n        var name, to, ref, lexeme, literal;\n        \n        if (token) {\n            name = token[0];\n            to = token[2];\n            \n            // tokenize again\n            if (!this.isAcceptableToken(token)) {\n                me.params = to;\n                return 1;\n            }\n            \n            lexeme = new Lexeme('terminal');\n\n            // end token is not symbolized!\n            literal = name;\n            if (name === endToken) {\n                name = map.endSymbol;\n            }\n            else {\n                literal = map.symbol[name];\n            }\n            \n            lexeme.name = literal;\n            lexeme.symbol = name;\n            lexeme.value = token[1];\n            lexeme.from = from;\n            lexeme.to = to;\n            \n            me.nextTokenIndex = to;\n            me.params = lexeme;\n            \n            // found shift state\n            ref = states[state];\n            if (name in ref) {\n                return 2;\n            }\n\n        }\n        \n        // can reduce remaining buffer\n        if (me.buffer.length && state in ends) {\n            return 3;\n        }\n        \n        // failed\n        me.params = 'Invalid token';\n        return 0;\n        \n    },\n    \n    ':shift': function (lexeme) {\n        var me = this,\n            buffer = me.buffer,\n            map = me.parser.map,\n            states = map.states,\n            state = me.pstate,\n            name = lexeme.symbol;\n        \n        buffer[buffer.length] = [state, lexeme];\n        \n        me.pstate = states[state][name];\n        me.current = lexeme;\n        me.params = null;\n        \n        // do not return \"$\" token\n        me.returns = name !== map.endSymbol;\n        me.params = me.nextTokenIndex;\n        \n        return 1;\n\n    },\n    \n    ':reduce': function (lexeme) {\n        var me = this,\n            map = me.parser.map,\n            buffer = me.buffer,\n            bl = buffer.length,\n            ends = map.ends,\n            states = map.states,\n            lookup = map.symbol,\n            state = me.pstate,\n            reduce = map.lookupReducer(ends[state]),\n            name = reduce[0],\n            params = reduce[1],\n            l = params,\n            endIndex = l - 1,\n            created = new Lexeme('nonterminal'),\n            values = [];\n            \n        var litem, item, from, to, ref, last;\n        \n        created.name = lookup[name];\n        created.symbol = name;\n        created.rule = reduce[2];\n        last = null;\n        \n        for (; l--;) {\n            item = buffer[--bl];\n            state = item[0];\n            litem = item[1];\n            \n            // create range\n            from = litem.from;\n            if (l === endIndex) {\n                to = litem.to;\n            }\n            \n            // create connection\n            litem.parent = created;\n             \n            if (last) {\n                last.previous = litem;\n                litem.next = last;\n            }\n            else {\n                created.last = litem;\n            }\n            created.first = last = litem;\n            values[l] = litem.value;\n        }\n        \n        created.value = values;\n        created.from = from;\n        created.to = to;\n        \n        buffer.length = bl;\n        \n        me.current = created;\n        \n        created.reduceCount = params;\n        \n        // only if it ended\n        if (name === map.augmentedRoot) {\n            \n            // end\n            if (bl === 0) {\n                litem = created.first;\n                \n                created.useType('end');\n                created.last = litem;\n                created.value = [litem.value];\n                created.rule = map.root;\n                created.reduceCount = 1;\n                \n                me.params = created;\n                \n                return 3;\n            }\n            else {\n                me.params = 'Failed last reduce';\n                return 0;\n            }\n            \n        }\n        \n        buffer[bl++] = [state, created];\n        me.returns = true;\n        \n        // iterate\n        state = states[state][name];\n        ref = states[state];\n        \n        name = lexeme.symbol;\n        me.pstate = state;\n        \n        // shift\n        if (name in ref) {\n            return 1;\n        \n        }\n        // reduce\n        else if (state in ends) {\n            return 2;\n        }\n        \n        me.params = 'failed reduce! inside :reduce';\n        return 0;\n        \n    },\n    \n    ':success': function (lexeme) {\n        var me = this;\n        \n        me.completed =\n            me.returns = true;\n\n        me.current = lexeme;\n        \n        return false;\n    },\n    \n    ':fail': function (error) {\n        var me = this;\n        \n        me.error = error;\n        me.completed = true;\n        \n        return false;\n    },\n    \n    isAcceptableToken: function (token) {\n        return !(token[0] in this.parser.map.exclude);\n    },\n    \n    update: function (value) {\n        var me = this,\n            current = me.current;\n        \n        if (!me.error && current) {\n            \n            current.value = value;\n            \n        }\n        \n        return this;\n    },\n    \n    reset: function () {\n        var parser = this.parser;\n        \n        this.nextTokenIndex = 0;\n        this.cursor = 0;\n        this.buffer = [];\n        \n        this.state = this.start;\n        this.pstate = parser.map.start;\n        this.params = null;\n        \n        if (!this.subject) {\n            delete this.ready;\n        }\n        \n        delete this.complete;\n        delete this.error;\n        \n        delete this.returns;\n        delete this.current;\n        \n    },\n    \n    set: function (subject) {\n        if (!string(subject)) {\n            throw new Error(\"Invalid String subject parameter.\");\n        }\n        \n        this.reset();\n        this.subject = subject;\n        this.ready = true;\n        \n\n    },\n    \n    next: function () {\n        var me = this,\n            actions = me.actions,\n            isNumber = number,\n            completed = me.completed,\n            returns = false;\n        var state, params, result, ref, current;\n\n        // reset current\n        if (!completed) {\n            delete me.current;\n        }\n        \n        for (; !completed;) {\n            \n            state = me.state;\n            params = me.params;\n            \n            // check if it action can be transitioned\n            if (!(state in me)) {\n                throw new Error(\"No handler found for state \" + state);\n            }\n            \n            // handle transition\n            result = me[state](params);\n            returns = me.returns;\n            delete me.returns;\n            current = me.current;\n            completed = me.completed;\n            \n            // break on error\n            if (me.error) {\n                break;\n            }\n            \n            // after transition, may error caught or successfully completed\n            if (!completed) {\n                \n                // accepts number result\n                if (!isNumber(result)) {\n                    throw new Error(INVALID_STATE_HANDLER + state);\n                }\n                    \n                // can transition to next state\n                ref = actions[state];\n                \n                if (!(result in ref)) {\n                    throw new Error(INVALID_STATE_HANDLER + state);\n                }\n                \n                me.state = ref[result];\n            }\n            \n            // return params\n            if (returns === true) {\n                return current;\n            }\n            \n            \n        }\n        \n        return me.error || !completed ? false : null;\n        \n    }\n};\n\nexport default BaseIterator;\n","'use strict';\n\nimport {\n            string,\n            method\n        } from \"libcore\";\n\nimport BaseIterator from \"./iterator/base.js\";\n        \nvar defaultIteratorName = \"base\",\n    ITERATORS = {};\n\nexport\n    function register(name, Class) {\n        var Base = BaseIterator;\n        \n        if (!string(name)) {\n            throw new Error(\"Invalid iterator name parameter.\");\n        }\n        \n        if (!method(Class) ||\n            (Class !== Base && !(Class.prototype instanceof Base))) {\n            throw new Error(\"Invalid iterator Class parameter.\");\n        }\n        \n        ITERATORS[':' + name] = Class;\n        \n        return true;\n    }\n\nexport\n    function get(name) {\n        var list = ITERATORS;\n        \n        if (string(name)) {\n            name = ':' + name;\n            if (name in list) {\n                return list[name];\n            }\n        }\n        \n        return null;\n    }\n\nexport {\n            defaultIteratorName as defaultIterator,\n            BaseIterator as Base\n        };\n\nregister(defaultIteratorName, BaseIterator);\n\n\n","'use strict';\n\nimport {\n            string,\n            object,\n            array\n\n        } from \"libcore\";\n\nimport Tokenizer from \"libcore-tokenizer\";\n\nimport StateMap from \"./state/map.js\";\n\nimport builder from \"./state/builder.js\";\n\nimport {\n            get as iteratorGet,\n            defaultIterator\n        } from \"./iterator.js\";\n\n\nfunction Parser(root, definition, exclude) {\n    \n    this.tokenizer = new Tokenizer();\n    this.map = new StateMap();\n    \n    if (arguments.length) {\n        this.define(root, definition, exclude);\n    }\n}\n\n\nParser.prototype = {\n    subject: '',\n    tokenizer: null,\n    map: null,\n    ready: false,\n    constructor: Parser,\n    \n    iterator: function (name) {\n        var get = iteratorGet;\n        var Iterator;\n        \n        if (arguments.length) {\n            Iterator = get(name);\n            if (!Iterator) {\n                throw new Error(\"Invalid iterator name parameter.\");\n            }\n        }\n        else {\n            Iterator = get(defaultIterator);\n        }\n        \n        return new Iterator(this);\n    },\n    \n    define: function (root, definition, exclude) {\n        var isArray = array;\n        var ready;\n        \n        if (!isArray(exclude)) {\n            exclude = [];\n        }\n        \n        if (!string(root)) {\n            throw new Error(\"Invalid root grammar rule parameter.\");\n        }\n        \n        if (!isArray(definition)) {\n            throw new Error(\"Invalid grammar rules definition parameter\");\n        }\n        \n        \n        this.ready = ready = builder(root,\n                                    this.map,\n                                    this.tokenizer,\n                                    definition,\n                                    exclude);\n        \n        return ready;\n\n    },\n    \n    fromJSON: function (json) {\n        var isObject = object;\n        var tokenMap;\n        \n        if (string(json)) {\n            try {\n                json = JSON.parse(json);\n            }\n            catch (e) {\n                throw new Error(\"Invalid JSON String json parameter.\");\n            }\n        }\n        \n        if (!isObject(json)) {\n            throw new Error(\"Invalid Object json parameter.\");\n        }\n        \n        tokenMap = json.tokens;\n        \n        if (!isObject(tokenMap)) {\n            throw new Error('Invalid \"tokens\" property of json parameter.');\n        }\n        \n        this.tokenizer.fromJSON(tokenMap);\n        this.map.importStates(json);\n        \n        return this;\n        \n    },\n    \n    toJSON: function () {\n        return JSON.stringify(this.toObject());\n    },\n    \n    toObject: function () {\n        var object;\n        \n        if (!this.ready) {\n            throw new Error(\"Grammar rules is not yet defined.\");\n        }\n        \n        object = this.map.toObject();\n        object.tokens = this.tokenizer.toObject();\n        \n        return object;\n    },\n    \n    parse: function (subject, reducer, iterator) {\n        var isString = string,\n            rpn = [],\n            rl = 0;\n        var lexeme, name, value;\n        \n        if (!isString(subject)) {\n            throw new Error(\"Invalid string subject parameter\");\n        }\n        \n        iterator = isString(iterator) ?\n                        this.iterator(iterator) :\n                        this.iterator();\n        \n        if (!iterator) {\n            throw new Error(\"Invalid Iterator parameter.\");\n        }\n        \n        if (!object(reducer)) {\n            reducer = {};\n        }\n        \n        iterator.set(subject);\n        \n        for (lexeme = iterator.next(); lexeme; lexeme = iterator.next()) {\n            rpn[rl++] = lexeme;\n            \n            name = lexeme.name;\n            if (name in reducer) {\n                value = reducer[name](name, lexeme.value, lexeme);\n                \n                if (typeof value !== \"undefined\") {\n                    lexeme.value = value;\n                }\n                else if (lexeme.params !== 0) {\n                    lexeme.value = null;\n                }\n                \n            }\n            \n        }\n        \n        return iterator.error ? false : rpn;\n        \n    }\n};\n\n\nexport default Parser;","'use strict';\n\nimport {\n            string,\n            object\n        } from \"libcore\";\n        \nimport Parser from \"./parser.js\";\n\nexport { Parser };\n\nexport {\n            Base as Iterator,\n            register as registerIterator\n        } from \"./iterator.js\";\n\nexport\n    function define(root, definitions, exclusions) {\n        return new Parser(root, definitions, exclusions);\n    }\n\nexport\n    function load(json) {\n        var parser;\n        \n        if (string(json)) {\n            try {\n                json = JSON.parse(json);\n            }\n            catch (e) {\n                throw new Error(\n                    \"Unable to load from invalid json JSON String parameter: \" +\n                    e.toString());\n            }\n        }\n        else if (!object(json)) {\n            throw new Error(\"Unable to load from invalid json Object parameter.\");\n        }\n        \n        parser = new Parser();\n        \n        try {\n            parser.fromJSON(json);\n        }\n        catch (e) {\n            throw new Error(e);\n        }\n        \n        return parser;\n    }\nexport\n    function isParser(parser) {\n        return parser instanceof Parser;\n    }\n\n\n\n\n// integrate to libcore\n//module.exports = libcore.lalr = {\n//    Parser: Parser,\n//    Iterator: iteratorManager.Base,\n//    isParser: isParser,\n//    define: define,\n//    load: load,\n//    registerIterator: iteratorManager.register\n//};"],"names":["StateMap","states","this","stateGen","symbolGen","reduceGen","root","lookup","symbol","start","anchors","ends","exclude","finalized","rawStates","reduceLookup","reducers","augmentedRoot","generateSymbol","endSymbol","endToken","empty","clone","obj","E","prototype","Pointer","lexeme","state","item","to","Item","id","map","list","generateState","base","watched","reduceList","recursion","references","length","define","grammar","anchor","production","rule","ruleId","params","queue","pendingRecursion","defineState","ruleIndex","rules","ruleGroup","setExcludes","getRecursionItem","watchItem","createRecursion","insertNextQueue","appendQueue","point","reduce","nextInQueue","name","tokenizer","l","lexemes","tokenId","created","suffix","from","current","lexemeId","terminal","lexIndex","ruleNames","ruleNameRe","RULE_NAME_RE","isString","string","isRegex","regex","array","Error","source","test","rgenId","join","build","stateMap","definitions","c","dc","dl","definition","groups","isArray","defineRule","grammarRoot","reset","splice","lookupSymbol","slice","contains","defineStates","finalize","Lexeme","type","useType","BaseIterator","parser","object","register","Class","Base","method","ITERATORS","get","Parser","Tokenizer","arguments","exclusions","load","json","JSON","parse","e","toString","fromJSON","isParser","constructor","symbols","access","generateReduceId","all","lookupReducer","setAnchorState","setReduceState","importStates","isObject","toObject","has","len","exportStates","stringify","next","parent","pointer","contextPointer","after","last","duplicate","getPointerItem","found","onSetPointer","indexOf","context","stateObject","group","TYPE","nonterminal","compound","end","value","reduceCount","first","previous","types","token","subject","returns","ready","completed","error","actions",":start","0","1",":tokenize","2","3",":shift",":reduce",":fail",":success","me","nextTokenIndex","ref","literal","pstate","tokenize","isAcceptableToken","buffer","litem","bl","endIndex","values","update","cursor","complete","set","result","isNumber","number","iterator","Iterator","iteratorGet","builder","tokenMap","tokens","toJSON","reducer","rpn","rl"],"mappings":"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"}