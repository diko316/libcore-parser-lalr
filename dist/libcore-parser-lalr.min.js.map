{"version":3,"file":"libcore-parser-lalr.min.js","sources":["../src/state/map.js","../src/state/builder/rule.js","../src/state/define/list.js","../src/state/define/state.js","../src/state/define.js","../src/state/builder/registry.js","../src/state/builder.js","../src/lexeme.js","../src/iterator/base.js","../src/iterator.js","../src/parser.js","../src/all.js"],"sourcesContent":["'use strict';\n\n\nimport {\n            string,\n            object,\n            array,\n            contains\n            \n        } from \"libcore\";\n\nfunction StateMap() {\n    var start = \"$start\",\n        end = \"$end\",\n        tokenEnd = \"$\",\n        states = {};\n\n    this.stateGen =\n        this.symbolGen =\n        this.reduceGen = 0;\n\n    states[start] = {};\n    this.root = end;\n    this.lookup = {};\n    this.symbol = {};\n    this.start = start;\n    this.states = states;\n    this.ends = {};\n    this.exclude = {};\n    this.finalized = false;\n    this.rawStates = [];\n\n    this.reduceLookup = {};\n    this.reducers = {};\n\n    this.augmentedRoot = this.generateSymbol(end);\n    this.endSymbol = this.generateSymbol(tokenEnd);\n    this.endToken = tokenEnd;\n\n}\n\n\nStateMap.prototype = {\n    stateGen: 0,\n    rawStates: null,\n    \n    constructor: StateMap,\n\n    createState: function (id) {\n        var states = this.states;\n\n        if (id in states) {\n            return states[id];\n        }\n        return (states[id] = {});\n    },\n    \n    createPointer: function (id, token, target) {\n        var state = this.createState(id);\n\n        state[token] = target;\n\n        return state;\n\n    },\n\n    generateSymbol: function (name) {\n\n        var lookup = this.lookup,\n            symbols = this.symbol,\n            access = ':' + name;\n        var id;\n        \n        if (access in lookup) {\n            return lookup[access];\n        }\n    \n        // create symbol\n        id = 's' + (++this.symbolGen).toString(16);\n        //id = name;\n    \n        lookup[access] = id;\n        symbols[id] = name;\n    \n        return id;\n    \n    },\n\n    generateReduceId: function (name, params, ruleIndex) {\n        var lookup = this.reduceLookup,\n            all = this.reducers,\n            access = name + ':' + params + ':' + ruleIndex;\n        var id;\n\n        if (access in lookup) {\n            return lookup[access];\n        }\n\n        id = 'r' + (++this.reduceGen).toString(16);\n\n        lookup[access] = id;\n        all[id] = [name, params, ruleIndex];\n\n        return id;\n    },\n\n    lookupReducer: function (id) {\n        var all = this.reducers;\n        \n        if (id in all) {\n            return all[id];\n        }\n\n        return false;\n    },\n\n    lookupSymbol(name) {\n        var symbols = this.symbol;\n\n        if (name in symbols) {\n            return symbols[name];\n        }\n\n        return false;\n\n    },\n    \n    setReduceState: function (state, name, params, ruleIndex) {\n        var ends = this.ends,\n            id = this.generateReduceId(name, params, ruleIndex),\n            all = this.reducers;\n        var current;\n        \n        if (state in ends) {\n            current = all[ends[state]];\n            if (current[0] !== name || current[1] !== params) {\n                throw new Error(\"Reduce conflict found \" +\n                                current[0] + ' ! <- ' + name);\n            }\n        }\n        else {\n            ends[state] = id;\n        }\n        \n    },\n    \n    reset: function () {\n        this.constructor();\n    },\n\n    finalize: function() {\n        var list = this.rawStates;\n        var c, l;\n\n        if (!this.finalized && list) {\n            this.finalized = true;\n\n            for (c = -1, l = list.length; l--;) {\n                list[++c].finalize();\n            }\n\n            // remove raw states\n            list.length = 0;\n\n            // remove lookup\n            delete this.lookup;\n        }\n        \n        return this.finalized;\n    },\n    \n    setExcludes: function (exclude) {\n        var current = this.exclude;\n        var c, l;\n        \n        if (array(exclude)) {\n            for (c = -1, l = exclude.length; l--;) {\n                current[exclude[++c]] = true;\n            }\n        }\n    },\n    \n    importStates: function (definition) {\n        var isObject = object,\n            isString = string;\n        var start, states, ends, root, exclude, symbol, reducers,\n            list, c, l;\n        \n        if (!isObject(definition)) {\n            throw new Error(\"Invalid Object definition parameter.\");\n        }\n        \n        states = definition.states;\n        if (!isObject(states)) {\n            throw new Error(\n                        'Invalid \"states\" Object in definition parameter.');\n        }\n        \n        root = definition.root;\n        if (!isString(root)) {\n            throw new Error(\n                        'Invalid \"root\" grammar rule in definition parameter.');\n        }\n        \n        start = definition.start;\n        if (!isString(start) || !(start in states)) {\n            throw new Error(\n                        'Invalid \"start\" state in definition parameter.');\n        }\n        \n        ends = definition.ends;\n        if (!isObject(ends)) {\n            throw new Error('Invalid \"ends\" states in definition parameter.');\n        }\n\n        reducers = definition.reducers;\n        if (!isObject(reducers)) {\n            throw new Error('Invalid production \"reducers\" in definition.');\n        }\n\n        symbol = definition.symbol;\n        if (!isObject(symbol)) {\n            throw new Error('Invalid \"symbol\" map in definition parameter.');\n        }\n\n        list = definition.exclude;\n        if (!array(list)) {\n            throw new Error('Invalid \"exclude\" token in definition parameter.');\n        }\n\n        exclude = {};\n        for (c = -1, l = list.length; l--;) {\n            exclude[list[++c]] = true;\n        }\n        \n        this.root = root;\n        this.start = start;\n        this.states = states;\n        this.ends = ends;\n        this.reducers = reducers;\n        this.exclude = exclude;\n        this.symbol = symbol;\n        \n        return true;\n    },\n    \n    toObject: function () {\n        var has = contains,\n            exclude = this.exclude,\n            list = [],\n            len = 0;\n        var name;\n\n        // export exclude\n        for (name in exclude) {\n            if (has(exclude, name)) {\n                list[len++] = name;\n            }\n        }\n\n\n        return {\n                root: this.root,\n                start: this.start,\n                states: this.states,\n                reducers: this.reducers,\n                ends: this.ends,\n                exclude: list,\n                symbol: this.symbol\n            };\n    },\n    \n    exportStates: function (json) {\n        var current = this.toObject();\n            \n        if (json === true) {\n            try {\n                return JSON.stringify(current);\n            }\n            catch (e) {\n                return null;\n            }\n        }\n        \n        return current;\n    }\n    \n    \n};\n\n\nexport default StateMap;","'use strict';\n\nimport {\n            regex,\n            string,\n            array\n        } from \"libcore\";\n\nvar LEXEME_RE = /^([A-Z][a-zA-Z]+(\\_?[a-zA-Z0-9])*|\\$end|\\$)$/;\n\nexport\n    function isTerminal(name) {\n        return name === \"$\" || !LEXEME_RE.test(name);\n    }\n\nexport \n    function defineTerminals(registry, name, definitions) {\n        var isRegex = regex;\n        var c, l, terminal;\n\n        for (c = -1, l = definitions.length; l--;) {\n            terminal = definitions[++c];\n\n            if (!isRegex(terminal)) {\n                throw new Error(\"Invalid Terminal pattern: \" + terminal);\n            }\n\n            if (!registry.registerTerminal(terminal, name)) {\n                throw new Error(\"Invalid Terminal pattern: \" + terminal);\n            }\n\n        }\n\n    }\n\n\n\nexport \n    function defineRules(registry, name, definitions) {\n        var isString = string,\n            isRegex = regex,\n            isArray = array,\n            isTerm = isTerminal;\n\n        var c, l, rl, rule, lexeme, ruleMask, terminals, isTerminalToken;\n\n        for (c = -1, l = definitions.length; l--;) {\n            rule = definitions[++c];\n            if (isString(rule) || isRegex(rule)) {\n                rule = [rule];\n            }\n            else if (!isArray(rule)) {\n                throw new Error(\"Invalid Grammar rule declared in \" + name);\n            }\n\n            //console.log(\"define rules: \", name, \" definitions \", rule);\n\n            // create rule mask\n            rl = rule.length;\n            ruleMask = [];\n            terminals = {};\n\n            for (; rl--;) {\n                lexeme = rule[rl];\n\n                if (isRegex(lexeme)) {\n\n                    if (!registry.terminalExist(lexeme)) {\n                        registry.registerTerminal(lexeme);\n                    }\n\n                    lexeme = '/' + lexeme.source + '/';\n                    isTerminalToken = true;\n                }\n                else if (!isString(lexeme)) {\n                    throw new Error(\"Invalid Grammar rule declared in \" + name);\n                }\n                else {\n                    isTerminalToken = isTerm(lexeme);\n                }\n\n                \n                //console.log(\"hashed! \", ruleMask[rl]);\n                ruleMask[rl] = registry.map.generateSymbol(lexeme);//registry.hashLexeme(lexeme);\n\n                if (isTerminalToken) {\n                    terminals[rl] = true;\n                }\n                \n            }\n\n            // define states from ruleMask\n            registry.registerRule(name, ruleMask, terminals);\n\n        }\n\n\n\n    }","'use strict';\n\n\nfunction List(name) {\n    this.name = name;\n}\n\nList.prototype = {\n    constructor: List,\n    first: null,\n    last: null,\n\n    shift: function () {\n        var item = this.first;\n        var first;\n\n        if (item) {\n            this.first = first = item[0];\n            if (!first) {\n                this.last = first;\n            }\n            return item[1];\n        }\n        \n\n        return null;\n    },\n\n    push: function (item) {\n        item = [null, item];\n\n        if (this.last) {\n            this.last[0] = item;\n        }\n        else {\n            this.first = item;\n        }\n\n        this.last = item;\n\n        return this;\n    }\n};\n\nexport default List;","'use strict';\n\nimport List from \"./list.js\";\n\nfunction State(registry, id) {\n    var list = registry.vstates;\n\n    id = id || 's' + (++registry.vstateIdGen);\n    \n    registry.vstateLookup[id] = \n        list[list.length] = this;\n    \n    this.id = id;\n    this.registry = registry;\n    this.tags = {};\n    this.tagNames = [];\n    this.pointer = new List();\n    this.rparent = null;\n    this.recursedAs = {};\n    \n}\n\nState.prototype = {\n    pointer: null,\n    registry: null,\n    constructor: State,\n\n    tag: function (id) {\n        var list = this.tags,\n            names = this.tagNames;\n\n        if (!(id in list)) {\n            list[id] = true;\n            names[names.length] = id;\n        }\n\n        return this;\n    },\n\n    hasTag: function (id) {\n        return id in this.tags;\n    },\n\n    setRecursed: function (production) {\n        var access = ':' + production,\n            list = this.recursedAs;\n\n        if (!(access in list)) {\n            list[access] = true;\n        }\n\n        return this;\n    },\n\n    isRecursed: function (production) {\n        var access = ':' + production,\n            list = this.recursedAs;\n\n        return access in list;\n    },\n\n    findRecursion: function (id) {\n        var me = this,\n            parent = me.rparent;\n\n        for (; parent; parent = parent.rparent) {\n            if (parent.hasTag(id)) {\n                return parent;\n            }\n        }\n        return null;\n    },\n\n    pointed: function (token) {\n        var pointer = this.pointer.first;\n        var item;\n\n        for (; pointer; pointer = pointer[0]) {\n            item = pointer[1];\n            if (item[1] === token) {\n                return item[0];\n            }\n        }\n        \n        return null;\n    },\n\n    pointTo: function (token, state) {\n        this.pointer.push([state, token]);\n        return state;\n    },\n\n    point: function (token, recurseState) {\n        var pointed = this.pointed(token);\n        var newState;\n\n        // create\n        if (!pointed) {\n            newState = new State(this.registry);\n            newState.rparent = recurseState;\n\n            return this.pointTo(token, newState);\n\n        }\n\n        return pointed;\n    }\n};\n\nexport default State;","'use strict';\n\nimport State from \"./define/state.js\";\n\nimport List from \"./define/list.js\";\n\n\nfunction define(registry) {\n\n    var map = registry.map,\n        StateClass = State,\n        STATE_END = 0,\n        STATE_START = 1,\n        STATE_RUN_RULES = 2,\n        STATE_START_RULE = 3,\n        STATE_DEFINE_LEXEME = 4,\n        STATE_DEFINE_ENDER = 5,\n        STATE_END_RULES = 6,\n        Queue = List,\n        defineState = STATE_START,\n        start = new StateClass(registry, map.start),\n        queue = new Queue('queue'),\n        pending = new Queue('pending');\n\n    var item, rules, rule, rindex, rlen, lexemes, tokens,\n        id, token, lindex, llen,\n        state, production, recursion, enqueue,\n        ruleState, tagged,\n        pointed, target,\n        \n        states, pointer, c, l;\n\n    //var limit = 1000;\n\n    queue.push([start, map.augmentedRoot]);\n\n    for (; defineState;) {\n        // if (!--limit) {\n        //     break;\n        // }\n\n        switch (defineState) {\n        case STATE_START:\n            item = queue.shift();\n\n            production = item[1];\n            ruleState = item[0];\n\n            // go to next\n            if (ruleState.isRecursed(production)) {\n                defineState = STATE_END_RULES;\n                break;\n            }\n\n            ruleState.setRecursed(production);\n            rules = registry.getRules(production);\n            lexemes = rules[1];\n            rules = rules[0];\n            rindex = -1;\n            rlen = rules.length;\n            defineState = STATE_RUN_RULES;\n            \n\n        /* falls through */\n        case STATE_RUN_RULES:\n            if (!(rlen--)) {\n                defineState = STATE_END_RULES;\n                break;\n            }\n\n            rule = rules[++rindex];\n            tokens = lexemes[rindex];\n            defineState = STATE_START_RULE;\n            \n\n        /* falls through */\n        case STATE_START_RULE:\n            lindex = -1;\n            llen = tokens.length;\n\n            id = rule[0];\n            token = tokens[0];\n            state = ruleState;\n\n            if (state.hasTag(id)) {\n                defineState = STATE_RUN_RULES;\n                break;\n            }\n            \n            target = state.findRecursion(id, token);\n            if (target) {\n                pointed = target.pointed(token);\n                if (pointed && !state.pointed(token)) {\n                    state.pointTo(token, pointed);\n                }\n            }\n\n            defineState = STATE_DEFINE_LEXEME;\n\n        /* falls through */\n        case STATE_DEFINE_LEXEME:\n\n            id = rule[++lindex];\n            tagged = state.hasTag(id);\n            \n\n            // dont redefine, go to next rule\n            if (!(llen--) || tagged) {\n                defineState = tagged ?\n                                STATE_RUN_RULES : STATE_DEFINE_ENDER;\n                break;\n            }\n\n            //console.log(\"define id! \", id);\n\n            token = tokens[lindex];\n\n            // recursion\n            recursion = registry.isRecursed(id);\n            if (recursion) {\n                (state === ruleState ?\n                    queue : pending).push([state, recursion]);\n            }\n\n            state.tag(id);\n            pointed = state.pointed(token);\n            state = pointed || state.point(token, ruleState);\n\n            break;\n\n        /* falls through */\n        case STATE_DEFINE_ENDER:\n            id = rule[lindex];\n            state.tag(id);\n            registry.setEnd(state.id, production, lindex, id);\n            defineState = STATE_RUN_RULES;\n            break;\n        \n        case STATE_END_RULES:\n            enqueue = queue.last;\n\n            if (!enqueue && pending.last) {\n                queue.push(enqueue = pending.shift());\n            }\n\n            defineState = enqueue ? STATE_START : STATE_END;\n            // if (!enqueue) {\n            //     console.log(\"ended! iterations: \", 1000 - limit);\n            // }\n        }\n        \n    }\n\n    //console.log(\"iterations: \", 1000 - limit);\n\n    // generate state map\n    states = registry.vstates;\n    for (c = - 1, l = states.length; l--;) {\n        state = states[++c];\n        id = state.id;\n        pointer = state.pointer.first;\n        map.createState(id);\n\n        // apply pointer\n        for (; pointer; pointer = pointer[0]) {\n            item = pointer[1];\n            map.createPointer(id, item[1], item[0].id);\n        }\n\n        // set end\n        item = registry.isEnd(id);\n        if (item) {\n            map.setReduceState(id, item[0], item[1], item[2]);\n        }\n    }\n\n    \n\n    \n    // generate report\n    // var states = registry.vstates,\n    //     ends = registry.ends;\n    // var c, l, state, pointer, end;\n\n    // for (c = -1, l = states.length; l--;) {\n    //     state = states[++c];\n    //     pointer = state.pointer.first;\n    //     if (!pointer) {\n    //         console.log('no transitions in ', state.id);\n    //     }\n    //     for (;pointer; pointer = pointer[0]) {\n    //         item = pointer[1];\n    //         target = item[0];\n    //         end = target.id in ends ?\n    //                 ' end: ' + ends[target.id].join(',') : '';\n\n    //         console.log(state.id, ':', item[1], '->', target.id, end);\n    //     }\n    // }\n    // console.log(registry.vstates);\n    // console.log(queue, pending);\n    \n}\n\n\n\n\n\nexport default define;","'use strict';\n\nimport {\n            string,\n            contains\n        } from \"libcore\";\n\n\nfunction Registry(map, tokenizer) {\n    this.tokenizer = tokenizer;\n    this.map = map;\n\n    this.productions = {};\n    this.lexemes = {};\n\n    this.stateIndex = {};\n    this.vstateIdGen = 0;\n    this.vstateLookup = {};\n    this.vstates = [];\n    this.ends = {};\n\n\n    this.recursions = {};\n    \n    this.terminals = [];\n    this.terminalLookup = {};\n\n    this.symbolGen = 0;\n    this.symbol = {};\n    this.lookup = {};\n\n    this.stateTagIdGen = 0;\n    this.stateTagId = {};\n    this.stateTagIdLookup = {};\n\n    \n\n}\n\nRegistry.prototype = {\n    constructor: Registry,\n\n    startRule: null,\n    rules: null,\n\n    hashState: function (name) {\n        var lookup = this.stateTagIdLookup,\n            access = ':' + name;\n        var id;\n\n        if (access in lookup) {\n            return lookup[access];\n        }\n\n        id = 't' + (++this.stateTagIdGen).toString(16);\n        lookup[access] = id;\n        this.stateTagId[id] = name;\n\n        return id;\n\n    },\n\n    lookupState: function (id) {\n        var list = this.stateTagId;\n        \n        return id in list ? list[id] : null;\n    },\n\n    hashLexeme: function (name) {\n        \n        var lookup = this.lookup,\n            symbols = this.symbol,\n            access = ':' + name;\n        var id;\n        \n        if (access in lookup) {\n            return lookup[access];\n        }\n    \n        // create symbol\n        //id = 'rhash>' + (++this.symbolGen);\n        //id = name.replace(/[^a-zA-Z0-9]/, 'x');\n        id = name;\n        //id = this.map.generateSymbol(name);\n\n    \n        lookup[access] = id;\n        symbols[id] = name;\n    \n        return id;\n    \n    },\n\n    lookupLexeme: function (id) {\n        var lookup = this.lookup;\n        return id in lookup ? lookup[id] : null;\n    },\n\n    terminalExist: function (terminal) {\n        var lookup = this.terminalLookup;\n\n        return string(terminal) ?\n                    contains(lookup, terminal) :\n                    '/' + terminal.source + '/' in lookup;\n    },\n\n    registerTerminal: function (terminal, name) {\n        var lookup = this.terminalLookup,\n            names = this.terminals,\n            access = this.map.generateSymbol('/' + terminal.source + '/');\n        var list;\n\n        if (!name) {\n            name = access;\n        }\n\n        //console.log(\"registering terminal \", name);\n\n        // allow register\n        if (!(access in lookup)) {\n            \n            lookup[access] = name;\n\n            // register named\n            if (access === name) {\n                names[names.length] = name;\n\n            }\n            else if (!contains(lookup, name)) {\n                names[names.length] = name;\n                lookup[name] = [access];\n\n            }\n            else {\n                list = lookup[name];\n                list[list.length] = access;\n            }\n\n            this.tokenizer.define([name, terminal]);\n\n            return name;\n            \n        }\n\n        return false;\n\n\n    },\n\n    registerRule: function (name, mask, terminals) {\n        var states = this.stateIndex,\n            recursions = this.recursions,\n            productions = this.productions,\n            lexemes = this.lexemes,\n            rules = [],\n            rl = 0,\n            c = -1,\n            total = mask.length,\n            l = total + 1;\n        var items, id, lexeme, list, index;\n\n        if (!(name in productions)) {\n            productions[name] = [];\n            lexemes[name] = [];\n        }\n\n        list = productions[name];\n        index = list.length;\n        list[index] = rules;\n        lexemes[name][index] = mask;\n        \n        //console.log(\"------------------------------- Rules for: \" + name);\n\n        for (; l--;) {\n            lexeme = mask[++c];\n\n            items = mask.slice(0);\n            items.splice(c, 0, '.');\n            id = this.hashState(name + ' -> ' + items.join(' '));\n\n            if (id in states) {\n                throw new Error(\"Duplicate Grammar Rule found in \" + name);\n            }\n\n            rules[rl++] = id;\n\n            states[id] = id;\n\n            // non-terminal\n            if (l && !(c in terminals)) {\n                //console.log(\"recusion? \", id, \" is \", lexeme);\n                recursions[id] = lexeme;\n            }\n\n        }\n\n    },\n\n    getRules: function (production) {\n        var list = this.productions;\n\n        return production in list ?\n                    [list[production], this.lexemes[production]] : null;\n    },\n\n    isRecursed: function (id) {\n        var recursions = this.recursions;\n        return id in recursions && recursions[id];\n    },\n\n    setEnd: function (id, production, params, ruleId) {\n        var ends = this.ends,\n            state = this.vstateLookup[id];\n\n        if (!(id in ends)) {\n            ends[id] = [production, params, ruleId];\n        }\n        else if (ends[id][0] !== production) {\n            throw new Error(\"Reduce conflict! \" + state.id +\n                                \":\" + ends[id][0] + ' <- ' + production);\n        }\n        \n    },\n\n    isEnd: function (id) {\n        var ends = this.ends;\n        return id in ends && ends[id];\n    }\n};\n\n\nexport default Registry;","'use strict';\n\nimport {\n            string,\n            regex,\n            array\n            \n        } from \"libcore\";\n        \n\n\nimport  {\n            isTerminal,\n            defineTerminals,\n            defineRules\n        } from \"./builder/rule.js\";\n\nimport define from \"./define.js\";\n\nimport Registry from \"./builder/registry.js\";\n\n\n        \n\n\nfunction build(root, map, tokenizer, definitions, exclude) {\n    var isString = string,\n        isArray = array,\n        isRegex = regex,\n        \n        isTerm = isTerminal,\n        defTerminal = defineTerminals,\n        defRule = defineRules,\n        name = null,\n        original = name,\n        \n        terminalDefinition = true;\n\n    var c, l, definition, registry, excludes;\n\n\n    map.reset();\n    \n    map.root = map.generateSymbol(\"$\" + root);\n\n    registry = new Registry(map, tokenizer);\n\n    // augment root\n    definitions.splice(definitions.length,\n                       0,\n                       map.lookupSymbol(map.augmentedRoot),\n                        [[ root, map.lookupSymbol(map.endSymbol)]]);\n\n    for (c = -1, l = definitions.length; l--;) {\n        \n        definition = definitions[++c];\n        \n        if (isString(definition)) {\n\n            terminalDefinition = isTerm(definition);\n            name = map.generateSymbol(definition);\n            original = definition;\n\n        }\n        else if (name && isArray(definition)) {\n\n            (terminalDefinition ?\n                defTerminal :\n                defRule)(registry, name, definition);\n\n        }\n        else {\n            throw new Error(\"Invalid item in definitions parameter.\");\n        }\n    }\n\n    define(registry);\n\n    // register excludes\n    if (isArray(exclude)) {\n        excludes = [];\n\n        //console.log(\"excludes! \", exclude);\n        for (c = -1, l = exclude.length; l--;) {\n            definition = exclude[++c];\n            if (!isRegex(definition)) {\n                throw new Error(\"Invalid [exclude] pattern parameter.\");\n            }\n            excludes[c] = registry.registerTerminal(definition);\n\n        }\n\n        map.setExcludes(excludes);\n    }\n\n    return true;\n}\n\n\nexport default build;\n\n","'use strict';\n\nimport { contains } from \"libcore\";\n\nvar TYPE = {\n        terminal: 1,\n        nonterminal: 2,\n        compound: 3,\n        end: 4\n    };\n    \n    \n\nfunction Lexeme(type) {\n    this.terminal = false;\n    this.useType(type);\n}\n\n\nLexeme.prototype = {\n    constructor: Lexeme,\n    name: null,\n    rule: null,\n    value: null,\n    reduceCount: 0,\n    from: 0,\n    to: 0,\n    \n    parent: null,\n    first: null,\n    last: null,\n    next: null,\n    previous: null,\n    terminal: false,\n    \n    useType: function (type) {\n        var types = TYPE;\n        this.type = type = contains(types, type) ?\n                                types[type] : types.token;\n        if (type === TYPE.terminal) {\n            this.terminal = true;\n        }\n    }\n};\n\nexport {\n        TYPE as type,\n        Lexeme\n    };\n\nexport default Lexeme;","'use strict';\n\nimport {\n            string,\n            number,\n            object\n        } from \"libcore\";\n        \nimport Lexeme from \"../lexeme.js\";\n\nvar INVALID_STATE_HANDLER = \"Invalid result from state handler\";\n\nfunction BaseIterator(parser) {\n    if (!object(parser)) {\n        throw new Error(\"Invalid parser parameter.\");\n    }\n    \n    this.parser = parser;\n    this.reset();\n    \n    this.start = ':start';\n}\n\n\nBaseIterator.prototype = {\n    constructor: BaseIterator,\n    subject: '',\n    returns: false,\n    current: null,\n    ready: false,\n    completed: false,\n    error: null,\n    \n    actions: {\n        ':start': {\n            0: ':fail',\n            1: ':tokenize'\n            \n        },\n        \n        ':tokenize': {\n            0: ':fail',\n            1: ':tokenize',\n            2: ':shift',\n            3: ':reduce'\n        },\n        \n        ':shift': {\n            0: ':fail',\n            1: ':tokenize'\n        },\n        \n        ':reduce': {\n            0: ':fail',\n            1: ':shift',\n            2: ':reduce',\n            3: ':success'\n        },\n        ':fail': {},\n        ':success': {}\n    },\n    \n    ':start': function () {\n        var me = this;\n        \n        me.params = me.nextTokenIndex;\n        \n        return 1;\n    },\n    \n    ':tokenize': function (from) {\n        var me = this,\n            parser = me.parser,\n            map = parser.map,\n            ends = map.ends,\n            states = map.states,\n            state = me.pstate,\n            token = parser.tokenizer.tokenize(from,\n                                              me.subject),\n            endToken = map.endToken;\n            \n        var name, to, ref, lexeme, literal;\n\n        \n        \n        if (token) {\n            name = token[0];\n            to = token[2];\n            \n            // tokenize again\n            if (!this.isAcceptableToken(token)) {\n                me.params = to;\n                return 1;\n            }\n\n            \n            \n            lexeme = new Lexeme('terminal');\n\n            // end token is not symbolized!\n            literal = name;\n            if (name === endToken) {\n                name = map.endSymbol;\n            }\n            else {\n                literal = map.symbol[name];\n            }\n\n            \n            \n            lexeme.name = literal;\n            lexeme.symbol = name;\n            lexeme.value = token[1];\n            lexeme.from = from;\n            lexeme.to = to;\n            \n            me.nextTokenIndex = to;\n            me.params = lexeme;\n            \n            // found shift state\n            ref = states[state];\n\n            //console.log(\"token accepted! \", token, name, ' shift? ', ref);\n\n            if (name in ref) {\n                return 2;\n            }\n\n        }\n        \n        // can reduce remaining buffer\n        if (me.buffer.length && state in ends) {\n            return 3;\n        }\n        \n        // failed\n        me.params = 'Invalid token';\n        return 0;\n        \n    },\n    \n    ':shift': function (lexeme) {\n        var me = this,\n            buffer = me.buffer,\n            map = me.parser.map,\n            states = map.states,\n            state = me.pstate,\n            name = lexeme.symbol;\n        \n        buffer[buffer.length] = [state, lexeme];\n        \n        me.pstate = states[state][name];\n        me.current = lexeme;\n        me.params = null;\n        \n        // do not return \"$\" token\n        me.returns = name !== map.endSymbol;\n        me.params = me.nextTokenIndex;\n\n        //console.log(\"shift from ! \", state, lexeme.value, \" to \", me.pstate);\n        \n        return 1;\n\n    },\n    \n    ':reduce': function (lexeme) {\n        var me = this,\n            map = me.parser.map,\n            buffer = me.buffer,\n            bl = buffer.length,\n            ends = map.ends,\n            states = map.states,\n            lookup = map.symbol,\n            state = me.pstate,\n            reduce = map.lookupReducer(ends[state]),\n            name = reduce[0],\n            params = reduce[1],\n            l = params,\n            endIndex = l - 1,\n            created = new Lexeme('nonterminal'),\n            values = [];\n            \n        var litem, item, from, to, ref, last;\n        \n        created.name = lookup[name];\n        created.symbol = name;\n        created.rule = lookup[reduce[2]];\n        last = null;\n        \n        //console.log(\"reduce count? \", params, \" from \", reduce);\n        \n        for (; l--;) {\n            item = buffer[--bl];\n            state = item[0];\n            litem = item[1];\n            \n            // create range\n            from = litem.from;\n            if (l === endIndex) {\n                to = litem.to;\n            }\n            \n            // create connection\n            litem.parent = created;\n             \n            if (last) {\n                last.previous = litem;\n                litem.next = last;\n            }\n            else {\n                created.last = litem;\n            }\n            created.first = last = litem;\n            values[l] = litem.value;\n        }\n        \n        created.value = values;\n        created.from = from;\n        created.to = to;\n        \n        buffer.length = bl;\n        \n        me.current = created;\n        \n        created.reduceCount = params;\n        \n        // only if it ended\n        if (name === map.augmentedRoot) {\n            \n            // end\n            if (bl === 0) {\n                litem = created.first;\n                \n                created.useType('end');\n                created.last = litem;\n                created.value = [litem.value];\n                created.rule = lookup[map.root];\n                created.reduceCount = 1;\n                \n                me.params = created;\n                \n                return 3;\n            }\n            else {\n                me.params = 'Failed last reduce';\n                return 0;\n            }\n            \n        }\n        \n        buffer[bl++] = [state, created];\n        me.returns = true;\n        \n        // iterate\n        state = states[state][name];\n        ref = states[state];\n        \n        name = lexeme.symbol;\n        me.pstate = state;\n       \n        // shift\n        //console.log('shift? ', name, 'lexeme', lexeme, ' in ', ref);\n        if (name in ref) {\n            return 1;\n        \n        }\n        // reduce\n        else if (state in ends) {\n            return 2;\n        }\n        \n        me.params = 'failed reduce! inside :reduce';\n        return 0;\n        \n    },\n    \n    ':success': function (lexeme) {\n        var me = this;\n        \n        me.completed =\n            me.returns = true;\n\n        me.current = lexeme;\n        \n        return false;\n    },\n    \n    ':fail': function (error) {\n        var me = this;\n        \n        me.error = error;\n        me.completed = true;\n        \n        return false;\n    },\n    \n    isAcceptableToken: function (token) {\n        return !(token[0] in this.parser.map.exclude);\n    },\n    \n    update: function (value) {\n        var me = this,\n            current = me.current;\n        \n        if (!me.error && current) {\n            \n            current.value = value;\n            \n        }\n        \n        return this;\n    },\n    \n    reset: function () {\n        var parser = this.parser;\n        \n        this.nextTokenIndex = 0;\n        this.cursor = 0;\n        this.buffer = [];\n        \n        this.state = this.start;\n        this.pstate = parser.map.start;\n        this.params = null;\n        \n        if (!this.subject) {\n            delete this.ready;\n        }\n        \n        delete this.complete;\n        delete this.error;\n        \n        delete this.returns;\n        delete this.current;\n        \n    },\n    \n    set: function (subject) {\n        if (!string(subject)) {\n            throw new Error(\"Invalid String subject parameter.\");\n        }\n        \n        this.reset();\n        this.subject = subject;\n        this.ready = true;\n        \n\n    },\n    \n    next: function () {\n        var me = this,\n            actions = me.actions,\n            isNumber = number,\n            completed = me.completed,\n            returns = false;\n        var state, params, result, ref, current;\n\n        if (!me.ready) {\n            throw new Error(\"Iterator is not yet ready, nothing to Parse.\");\n        }\n\n        // reset current\n        if (!completed) {\n            delete me.current;\n        }\n        \n        for (; !completed;) {\n            \n            state = me.state;\n            params = me.params;\n            \n            // check if it action can be transitioned\n            if (!(state in me)) {\n                throw new Error(\"No handler found for state \" + state);\n            }\n            \n            // handle transition\n            result = me[state](params);\n            returns = me.returns;\n            delete me.returns;\n            current = me.current;\n            completed = me.completed;\n            \n            // break on error\n            if (me.error) {\n                break;\n            }\n            \n            // after transition, may error caught or successfully completed\n            if (!completed) {\n                \n                // accepts number result\n                if (!isNumber(result)) {\n                    throw new Error(INVALID_STATE_HANDLER + state);\n                }\n                    \n                // can transition to next state\n                ref = actions[state];\n                \n                if (!(result in ref)) {\n                    throw new Error(INVALID_STATE_HANDLER + state);\n                }\n                \n                me.state = ref[result];\n            }\n            \n            // return params\n            if (returns === true) {\n                return current;\n            }\n            \n            \n        }\n        \n        return me.error || !completed ? false : null;\n        \n    }\n};\n\nexport default BaseIterator;\n","'use strict';\n\nimport {\n            string,\n            method\n        } from \"libcore\";\n\nimport BaseIterator from \"./iterator/base.js\";\n        \nvar defaultIteratorName = \"base\",\n    ITERATORS = {};\n\nexport\n    function register(name, Class) {\n        var Base = BaseIterator;\n        \n        if (!string(name)) {\n            throw new Error(\"Invalid iterator name parameter.\");\n        }\n        \n        if (!method(Class) ||\n            (Class !== Base && !(Class.prototype instanceof Base))) {\n            throw new Error(\"Invalid iterator Class parameter.\");\n        }\n        \n        ITERATORS[':' + name] = Class;\n        \n        return true;\n    }\n\nexport\n    function get(name) {\n        var list = ITERATORS;\n        \n        if (string(name)) {\n            name = ':' + name;\n            if (name in list) {\n                return list[name];\n            }\n        }\n        \n        return null;\n    }\n\nexport {\n            defaultIteratorName as defaultIterator,\n            BaseIterator as Base\n        };\n\nregister(defaultIteratorName, BaseIterator);\n\n\n","'use strict';\n\nimport {\n            string,\n            object,\n            array\n\n        } from \"libcore\";\n\nimport Tokenizer from \"libcore-tokenizer\";\n\nimport StateMap from \"./state/map.js\";\n\nimport builder from \"./state/builder.js\";\n\nimport {\n            get as iteratorGet,\n            defaultIterator\n        } from \"./iterator.js\";\n\n\nfunction Parser(root, definition, exclude) {\n    \n    this.tokenizer = new Tokenizer();\n    this.map = new StateMap();\n    \n    if (arguments.length) {\n        this.define(root, definition, exclude);\n    }\n}\n\n\nParser.prototype = {\n    subject: '',\n    tokenizer: null,\n    map: null,\n    ready: false,\n    constructor: Parser,\n    \n    iterator: function (name) {\n        var get = iteratorGet;\n        var Iterator;\n        \n        if (arguments.length) {\n            Iterator = get(name);\n            if (!Iterator) {\n                throw new Error(\"Invalid iterator name parameter.\");\n            }\n        }\n        else {\n            Iterator = get(defaultIterator);\n        }\n        \n        return new Iterator(this);\n    },\n    \n    define: function (root, definition, exclude) {\n        var isArray = array;\n        var ready;\n        \n        if (!isArray(exclude)) {\n            exclude = [];\n        }\n        \n        if (!string(root)) {\n            throw new Error(\"Invalid root grammar rule parameter.\");\n        }\n        \n        if (!isArray(definition)) {\n            throw new Error(\"Invalid grammar rules definition parameter\");\n        }\n        \n        \n        this.ready = ready = builder(root,\n                                    this.map,\n                                    this.tokenizer,\n                                    definition,\n                                    exclude);\n        \n        return ready;\n\n    },\n    \n    fromJSON: function (json) {\n        var isObject = object;\n        var tokenMap;\n        \n        if (string(json)) {\n            try {\n                json = JSON.parse(json);\n            }\n            catch (e) {\n                throw new Error(\"Invalid JSON String json parameter.\");\n            }\n        }\n        \n        if (!isObject(json)) {\n            throw new Error(\"Invalid Object json parameter.\");\n        }\n        \n        tokenMap = json.tokens;\n        \n        if (!isObject(tokenMap)) {\n            throw new Error('Invalid \"tokens\" property of json parameter.');\n        }\n        \n        this.tokenizer.fromJSON(tokenMap);\n        this.map.importStates(json);\n        \n        return this;\n        \n    },\n    \n    toJSON: function () {\n        return JSON.stringify(this.toObject());\n    },\n    \n    toObject: function () {\n        var object;\n        \n        if (!this.ready) {\n            throw new Error(\"Grammar rules is not yet defined.\");\n        }\n        \n        object = this.map.toObject();\n        object.tokens = this.tokenizer.toObject();\n        \n        return object;\n    },\n    \n    parse: function (subject, reducer, iterator) {\n        var isString = string,\n            rpn = [],\n            rl = 0;\n        var lexeme, name, value;\n        \n        if (!isString(subject)) {\n            throw new Error(\"Invalid string subject parameter\");\n        }\n        \n        iterator = isString(iterator) ?\n                        this.iterator(iterator) :\n                        this.iterator();\n        \n        if (!iterator) {\n            throw new Error(\"Invalid Iterator parameter.\");\n        }\n        \n        if (!object(reducer)) {\n            reducer = {};\n        }\n        \n        iterator.set(subject);\n        \n        for (lexeme = iterator.next(); lexeme; lexeme = iterator.next()) {\n            rpn[rl++] = lexeme;\n            \n            name = lexeme.name;\n            if (name in reducer) {\n                value = reducer[name](name, lexeme.value, lexeme);\n                \n                if (typeof value !== \"undefined\") {\n                    lexeme.value = value;\n                }\n                else if (lexeme.params !== 0) {\n                    lexeme.value = null;\n                }\n                \n            }\n            \n        }\n        \n        return iterator.error ? false : rpn;\n        \n    }\n};\n\n\nexport default Parser;","'use strict';\n\nimport {\n            string,\n            object\n        } from \"libcore\";\n        \nimport Parser from \"./parser.js\";\n\nexport { Parser };\n\nexport {\n            Base as Iterator,\n            register as registerIterator\n        } from \"./iterator.js\";\n\nexport\n    function define(root, definitions, exclusions) {\n        return new Parser(root, definitions, exclusions);\n    }\n\nexport\n    function load(json) {\n        var parser;\n        \n        if (string(json)) {\n            try {\n                json = JSON.parse(json);\n            }\n            catch (e) {\n                throw new Error(\n                    \"Unable to load from invalid json JSON String parameter: \" +\n                    e.toString());\n            }\n        }\n        else if (!object(json)) {\n            throw new Error(\"Unable to load from invalid json Object parameter.\");\n        }\n        \n        parser = new Parser();\n        \n        try {\n            parser.fromJSON(json);\n        }\n        catch (e) {\n            throw new Error(e);\n        }\n        \n        return parser;\n    }\nexport\n    function isParser(parser) {\n        return parser instanceof Parser;\n    }\n\n\n\n\n// integrate to libcore\n//module.exports = libcore.lalr = {\n//    Parser: Parser,\n//    Iterator: iteratorManager.Base,\n//    isParser: isParser,\n//    define: define,\n//    load: load,\n//    registerIterator: iteratorManager.register\n//};"],"names":["StateMap","states","this","stateGen","symbolGen","reduceGen","root","lookup","symbol","start","ends","exclude","finalized","rawStates","reduceLookup","reducers","augmentedRoot","generateSymbol","endSymbol","endToken","isTerminal","name","LEXEME_RE","test","defineTerminals","registry","definitions","c","l","terminal","isRegex","regex","length","Error","registerTerminal","defineRules","rl","rule","lexeme","ruleMask","terminals","isTerminalToken","isString","string","isArray","array","isTerm","terminalExist","source","map","registerRule","List","State","id","list","vstates","vstateIdGen","vstateLookup","tags","tagNames","pointer","rparent","recursedAs","define","item","rules","rindex","rlen","lexemes","tokens","token","lindex","llen","state","production","recursion","enqueue","ruleState","tagged","pointed","target","Queue","defineState","queue","pending","push","shift","isRecursed","setRecursed","getRules","hasTag","findRecursion","pointTo","tag","point","setEnd","last","first","createState","createPointer","isEnd","setReduceState","Registry","tokenizer","productions","stateIndex","recursions","terminalLookup","stateTagIdGen","stateTagId","stateTagIdLookup","build","definition","excludes","defTerminal","defRule","terminalDefinition","reset","splice","lookupSymbol","setExcludes","Lexeme","type","useType","BaseIterator","parser","object","register","Class","Base","method","prototype","ITERATORS","get","Parser","Tokenizer","arguments","exclusions","load","json","JSON","parse","e","toString","fromJSON","isParser","constructor","symbols","access","generateReduceId","params","ruleIndex","all","lookupReducer","current","finalize","importStates","isObject","toObject","has","contains","len","exportStates","stringify","names","parent","recurseState","newState","startRule","hashState","lookupState","hashLexeme","lookupLexeme","mask","items","index","slice","join","ruleId","TYPE","nonterminal","compound","end","value","reduceCount","from","to","next","previous","types","subject","returns","ready","completed","error","actions",":start","0","1",":tokenize","2","3",":shift",":reduce",":fail",":success","me","nextTokenIndex","ref","literal","pstate","tokenize","isAcceptableToken","buffer","litem","bl","reduce","endIndex","created","values","update","cursor","complete","set","result","isNumber","number","iterator","Iterator","iteratorGet","builder","tokenMap","toJSON","reducer","rpn"],"mappings":"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"}